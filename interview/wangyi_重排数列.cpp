/*
小易有一个长度为N的正整数数列A = {A[1], A[2], A[3]..., A[N]}。
牛博士给小易出了一个难题:
对数列A进行重新排列,使数列A满足所有的A[i] * A[i + 1](1 ≤ i ≤ N - 1)都是4的倍数。
小易现在需要判断一个数列是否可以重排之后满足牛博士的要求。 
输入描述:
输入的第一行为数列的个数t(1 ≤ t ≤ 10),
接下来每两行描述一个数列A,第一行为数列长度n(1 ≤ n ≤ 10^5)
第二行为n个正整数A[i](1 ≤ A[i] ≤ 10^9)


输出描述:
对于每个数列输出一行表示是否可以满足牛博士要求,如果可以输出Yes,否则输出No。

输入例子1:
2
3
1 10 100
4
1 2 3 4

输出例子1:
Yes
No
*/

#include<iostream>
#include<vector>
using namespace std;

//是否可以被4整除 
bool is4(int n){
	if(n%4==0)
	return true;
	return false; 
}

//是否可以被2整除
bool is2(int n){
	if(n%2==0)
	return true;
	return false;
} 

//每一个奇数必须与一个能被4整数的数搭配否则不行 
int main(){
	
	int n;
	cin>>n;
//	vector<int>a;
	int temp;
	int b;
	for(int i=0;i<n;i++){
		cin>>temp;  //输入排列的列数 
		int oushu=0;
		int jishu=0;
		int by4=0;
		for(int j=0;j<temp;j++){ //输入以排列 
		cin>>b;
		
		//统计信息 
		if(is2(b))
		{
			oushu++;
			if(is4(b))
			by4++;
		}else{
			jishu++;
		}
		
		//a.push_back(b);			
		}
		
		if(by4<jishu)	 
			cout<<"No"<<endl; 
		else
			cout<<"Yes"<<endl;
	}//总循环结束  
} 
